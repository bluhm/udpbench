.\" $OpenBSD$
.\"
.\" Copyright (c) 2022-2025 Alexander Bluhm <bluhm@genua.de>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt UDPBENCH 1
.Os
.Sh NAME
.Nm udpbench
.Nd udp network benchmarking tool
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Fl DH
.Op Fl B Ar bitrate
.Op Fl b Ar bufsize
.Op Fl d Ar delay
.Op Fl i Ar idle
.Op Fl l Ar length
.Op Fl m Ar mmsglen
.Op Fl N Ar repeat
.Op Fl P Ar packetrate
.Op Fl p Ar port
.Op Fl R Ar remoteprog
.Op Fl r Ar remotessh
.Op Fl t Ar timeout
.Cm send | recv
.Op Ar hostname
.Ek
.Sh DESCRIPTION
The
.Nm
benchmark tool sends or receives UDP packets between two IP end points.
It measures the thoughput on both sides.
The local action has to be given as
.Cm send
or
.Cm recv .
.Ar hostname
is the IP address for
.Xr connect 2
when sending
or
.Xr bind 2
when receiving.
In the latter case it is optional, then the unspecified address is
used.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl B Ar bitrate
The value specifies the number of bits to send over the wire within
a second.
The size of the ethernet frame is calculaed from UDP payload length.
This adds a small delay between
.Xr send 2
system calls if packets would be generated too fast otherwise.
.It Fl b Ar bufsize
Set size of send or receive socket buffer.
.It Fl D
.Ox
.Xr pf 4
.Ic divert-packet
is used to receive packets on divert socket.
The pf rule has to be configured manually, the option only changes
the socket type on the
.Cm recv
side.
In
.Cm send
mode this option has no effect on local sending.
With dynamic
.Ic ssh
the option is passed to the remote process.
.It Fl d Ar delay
Sleep some seconds before sending packets with payload.
This is useful to wait for setup of multiple processes via ssh.
An initial empty packet is sent before delay to trigger setup.
Default is 0 seconds which disables the feature.
.It Fl H
Use IPv6 hop-by-hop option by adding a router alert when sending.
.It Fl i Ar idle
After a period of not receiving any packets, the recv side will stop.
Default is 1 second, 0 will ignore idle periods.
.It Fl l Ar length
Set length of the UDP payload for sending, or length of the userland
buffer for receiving the packet.
By default the payload is empty.
.It Fl m Ar mmsglen
Use
.Xr recvmmsg 2
and
.Xr sendmmsg 2
and set the amount of simultaneously handled messages.
Default is to use
.Xr recv 2
and
.Xr send 2 .
This can be explicity enforced by setting
.Ar mmsglen
to 0.
.It Fl N Ar repeat
Fork multiple processes to send or receive in parallel.
For each process the IP address is incremented by one to get load
balancing.
.It Fl P Ar packetrate
The value specifies the number of packets to send within a second.
This adds a small delay between
.Xr send 2
system calls if packets would be generated too fast otherwise.
.It Fl p Ar port
The destination UDP port is 12345 by default.
When set to 0, a random port is used.
.It Fl R Ar remoteprog
When the remote side is started dynamically via
.Ic ssh ,
use this path for the
.Nm
program.
By default the remote program is invoked the same way as the local
.Nm .
.It Fl r Ar remotessh
The receiving and sending process can be started manually or
dynamically.
If the
.Ar remotessh
location is given as
.Cm user@host ,
an
.Nm
process is started on the remote machine with the
.Cm send
and
.Cm recv
parameter excanged.
.It Fl t Ar timeout
Set the duration for sending packets.
When receiving, all packets have to arrive within this timeout plus
two seconds.
Disable timeout with 0 and run forever.
Default is 1 second.
.El
.Sh EXAMPLES
Receive UDP packets on any address and port 12345.
Run for 12 seconds to process all input.
.D1 Nm Fl t Ar 10 Cm recv
.Pp
Send empty UDP packets to local host port 12345.
Run for 10 seconds and process as much as possible.
.D1 Nm Fl t Ar 10 Cm send Ar 127.0.0.1
.Pp
Test throughput of loopback interface for one second.
Two
.Nm
processes are started, one with
.Cm send
and one dynamically with
.Cm recv .
As the destination port is random, but is the same for both sides,
multiple instances can be started in parallel.
.D1 Nm Fl r Ar localhost Fl p Ar 0 Cm send Ar 127.0.0.1
.Pp
Log into remove host and receive packets from there.
The address of the receiving side is not optional.
.D1 Nm Fl r Ar root@remotehost Cm recv Ar localip
.Pp
This sends the traffic in the opposite direction of the previous
example.
.D1 Nm Fl r Ar root@remotehost Cm send Ar remoteip
.Pp
Receive packets from remote host and divert them to local socket.
This needs configuration in
.Xr pf.conf 5 .
.D1 Ic pass Ic proto Ic udp Ic to Ar localip Ic port Ar 1234 Ic divert-packet Ic port Ar 1234
.D1 Nm Fl D Fl p Ar 1234 Fl r Ar root@remotehost Cm recv Ar localip
.Sh DIAGNOSTICS
.Bl -diag
.It "udpbench recv: recv 1: Interrupted system call"
While the receiver was waiting for the first packet, the timeout
triggered.
Check connectivity, start sender quickly after receiver, increase
.Fl t Ar timeout .
.It "udpbench recv: not enough idle time"
For the receiving side the stream of packets finishes after 1 second
idle time.
If the receive timeout happens earlier, the measurement is incomplete.
Increase
.Fl t Ar timeout .
.It "send: syscalls 812635, packets 812635, frame 1, payload 1452, ip 1500, ether 1538, begin 1706272739.464771, end 1706272749.464692, duration 9.999921, bit/s 9.99874e+08, start 1706272738.464447, stop 1706272749.464716"
.Pp
Summary of
.Nm
sending side.
Status is printed as single line just before exit.
.Bl -tag -width 8
.It syscalls
Number of
.Xr send 2
or
.Xr sendmmsg 2
system calls made.
.It packets
Number of packets sent.
.It frame
Number of ethernet frames for each packet.
.It payload
Bytes in the UDP payload.
.It ip
Length of IP packet.
.It ether
Length of ethernet frame.
.It begin
Time stamp when the first packet with payload was sent.
If
.Fl d Ar delay
is set, this is after the sleeping delay.
.It end
Time stamp after the final packet was sent.
.It duration
Time between begin and end.
.It bit/s
Bits of all packets in ethernet size during duration per second.
.It start
Time stamp after socket is connected.
.It stop
Time stamp before socket is closed.
.El
.It "recv: syscalls 374484, packets 374431, frame 1, payload 1452, ip 1500, ether 1538, begin 1706272739.464876, end 1706272749.473193, duration 10.008317, bit/s 4.60317e+08, start 1706272738.024436, stop 1706272754.024705"
.Pp
Summary of
.Nm
receiving side, only difference to send is explained.
.Bl -tag -width 8
.It syscalls
Number of
.Xr recv 2
or
.Xr recvmmsg 2
system calls made.
.It packets
Number of packets received.
.It begin
Time stamp when the first packet with payload was received.
If
.Fl d Ar delay
is set, this is after the empty packet starting the delay.
.It end
Time stamp after the final packet was received.
If
.Fl i Ar idle
is set, end is the time before idle timed out.
.It start
Time stamp after socket is bound.
.El
.El
.Sh SEE ALSO
.Xr tcpbench 1
.Sh AUTHORS
The
.Nm
program was written by
.An Alexander Bluhm Aq Mt bluhm@genua.de .
.Sh BUGS
The number of ethernet frames and their size is calculated.
With vlan or jumbo it will be wrong.
